29/05/2020 08:19:18 - DEBUG - BaseRecord.test - (<BaseRecord: BaseRecord object>,) - {} - None - executed without exceptions
29/05/2020 11:47:36 - DEBUG - BaseRecord.test - (<Employee: None>,) - {} - None - executed without exceptions
29/05/2020 11:47:36 - DEBUG - BaseRecord.test - (<Employee: None>,) - {} - None - executed without exceptions
01/06/2020 05:45:23 - ERROR - BaseRecord.get_fields - (<Employee: None>,) - {} - None - executed with an exception 'classmethod' object is not callable
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 11:58:25 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:01:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:46:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:47:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception cannot encode object: Decimal('123.45'), of type: <class 'decimal.Decimal'>
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 12:58:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:07 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:09:08 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560e4290fd49e2d9a260e'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:11:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception Could not save document (Can't extract geo keys: { _id: ObjectId('5ed560f0290fd49e2d9a260f'), _cls: "Store", createdUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, createdTimestamp: new Date(1591017065706), lastModifiedUser: { $ref: "Employee", $id: ObjectId('5ed019b2e57c1062acd680eb') }, lastModifiedTimestamp: new Date(1591017065706), storeNumber: "123", fkCustomer: { $ref: "Customer", $id: ObjectId('5ec573830b1b99deab19961a') }, address: { addressLineOne: "32996 Ave. D", addressLineTwo: "", city: "Yucaipa", state: "CA", zip: "98988", country: "Albania" }, phoneNumber: "9097056842", region: "y123.1", division: "NW Div", awardedVendor: "PR Skate", storeManagerName: { firstName: "Store ManagerFirst", lastName: "Last", fullName: "Store ManagerFirst Last" }, storeManagerEmail: "email@email.com", opsManagerName: { firstName: "OPS First", lastName: "Last", fullName: "OPS First Last" }, opsManagerEmail: "Email@email.com", managerName: { firstName: "Manager First", lastName: "Last", fullName: "Manager First Last" }, managerEmail: "email@email.com", overnightManagerName: { firstName: "Overnight First", lastName: "Last", fullName: "Overnight First Last" }, overnightManagerEmail: "email@email.com", overnightCrew: "Full Time", overnightAccess: [ "SUN", "TUES", "WED", "SAT" ], noiseOrdinance: true, timeCutOff: "11:11", fkRegionCode: { $ref: "RegionCode", $id: ObjectId('5ed05703e1e9369487f4db3b') }, fkMicroRegionCode: { $ref: "MicroRegionCode", $id: ObjectId('5ed056f4e1e9369487f4db3a') }, coordinates: { type: "Point", coordinates: [ 123.45, 111.42 ] }, active: true, installationDueDates: [ new Date(1593820800000) ], inspectionDueDates: [ new Date(1592956800000) ], fiscalWeek: 5 }  longitude/latitude is out of bounds, lng: 123.45 lat: 111.42)
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:15:03 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:20 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:25 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:24:25 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:24:44 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:24:59 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:00 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:25:00 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (PointField can only accept lists of [x, y]: ['coordinates'])
01/06/2020 01:25:53 - DEBUG - Store.save - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:29:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:31:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - DEBUG - Store.set_cords - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:39:48 - DEBUG - Store.set_cords - (<Store: Store object>, Decimal('123.45'), Decimal('111.420')) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:43:32 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:47:22 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 01:48:13 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:48:24 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:24 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:28 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:50 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:48:52 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:49:47 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:50:05 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:50:05 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:23 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:50:59 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:16 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:51:49 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:53:17 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:34 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:55:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:58:52 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 01:59:20 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': 0.0, 'long': 0.0} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 01:59:20 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (GeoPointField can only accept tuples or lists of (x, y): ['coordinates'])
01/06/2020 02:00:12 - ERROR - Store.set_cords - (<Store: Store object>,) - {'lat': 0.0, 'long': 0.0} - None - executed with an exception db_field should be a string.
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:00:12 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - ERROR - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed with an exception db_field should be a string.
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:01:42 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:31 - ERROR - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed with an exception db_field should be a string.
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:36 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:02:37 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:53 - ERROR - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed with an exception db_field should be a string.
01/06/2020 02:04:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:04:54 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - ERROR - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed with an exception db_field should be a string.
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:10:45 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 02:12:58 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:12:58 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - Store.set_cords - (<Store: Store object>,) - {'lat': Decimal('123.45'), 'long': Decimal('111.420')} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:14:39 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:17:25 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:18:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('123.45'), Decimal('111.420')]) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:26:54 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:27:43 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'storeNumber', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'])
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:35:38 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:36:00 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:37:29 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:38:42 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 02:41:48 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['123.45', '111.420']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:15:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values (['75.12', '50.00']) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:17:02 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('75.12'), Decimal('50.00')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:10 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:19:11 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Both values ([Decimal('50.00'), Decimal('75.12')]) in point must be float or int: ['coordinates'])
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:37:56 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:40:18 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
01/06/2020 03:41:22 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:47:55 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:56:06 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 10:57:49 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:32:38 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:35:13 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (Field is required: ['_createdUser', 'fkCustomer', 'address', 'phoneNumber', 'region', 'division'] StringField only accepts string values: ['storeNumber'])
02/06/2020 11:36:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 11:36:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:36:52 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:36:53 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 11:54:04 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:18:27 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 12:33:15 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 01:58:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:58:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:58:03 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:58:04 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:26 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 01:59:50 - ERROR - BaseRecord.save - (<Store: Store object>,) - {} - None - executed with an exception ValidationError (Store:None) (_latitude.Decimal value is too large: ['coordinates'])
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkCustomer') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.is_valid_reference_field - (<Store: Store object>, 'fkMicroRegionCode') - {} - True - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.custom_validate - (<Store: Store object>,) - {} - None - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 02:17:11 - DEBUG - BaseRecord.save - (<Store: Store object>,) - {} - Store object - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:38 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:38 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:38 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:38 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:38 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:38 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:38 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:38 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:38 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:38 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:07:54 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:39 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:39 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:39 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:39 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:39 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:39 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:39 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:39 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:39 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:39 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:09:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception ValidationError (MicroRegionCode:None) (String value is too long: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception ValidationError (MicroRegionCode:None) (String value is too long: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception ValidationError (MicroRegionCode:None) (String value is too long: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception ValidationError (MicroRegionCode:None) (String value is too long: ['regionCode'])
02/06/2020 03:09:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception ValidationError (MicroRegionCode:None) (String value is too long: ['regionCode'])
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:10:49 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:10:49 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:10:49 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:10:49 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:10:49 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:10:49 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:10:49 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:10:49 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:10:49 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:10:49 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:10 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:10 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:10 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:10 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:10 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:10 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:10 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:10 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:10 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:10 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:50 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:50 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:50 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:14:53 - ERROR - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.MicroRegionCode index: name_1 dup key: { : null })
02/06/2020 03:23:04 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:23:05 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:23:05 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:23:05 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:23:05 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:23:05 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:23:05 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:23:05 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:23:05 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:23:05 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:23:05 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:23:05 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:23:05 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:23:05 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:23:05 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:38 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:38 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:38 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:38 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:38 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:38 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:38 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:38 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:38 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:38 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:25:43 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:54 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:54 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:54 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:54 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:54 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:54 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:54 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:54 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:54 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:54 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:30:57 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_valid_reference_field - (<Customer: Customer object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.is_field_unique - (<Customer: Customer object>, 'customerName') - {} - True - executed without exceptions
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - ERROR - BaseRecord.custom_validate - (<Customer: Customer object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['customerName'])
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:34:17 - DEBUG - BaseRecord.save - (<Customer: Customer object>,) - {} - Customer object - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - None - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - None - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - None - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:36:39 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:36:39 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:36:39 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:36:39 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:36:39 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:36:39 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception ValidationError (RegionCode:None) (Field is required: ['_createdUser'])
02/06/2020 03:36:39 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception ValidationError (RegionCode:None) (Field is required: ['_createdUser'])
02/06/2020 03:36:39 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception ValidationError (RegionCode:None) (Field is required: ['_createdUser'])
02/06/2020 03:36:39 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception ValidationError (RegionCode:None) (Field is required: ['_createdUser'])
02/06/2020 03:36:39 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception ValidationError (RegionCode:None) (Field is required: ['_createdUser'])
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:38:41 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:38:41 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:38:41 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:38:41 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:38:41 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:38:41 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:38:41 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:38:41 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:38:41 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:38:41 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: regionCodeID_1 dup key: { : null })
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:20 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:41:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:46:35 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:46:35 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:46:35 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:46:35 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:46:35 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:46:35 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:46:35 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:46:35 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:46:35 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:46:35 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:51:40 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:51:40 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:51:40 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:51:40 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:51:40 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:51:40 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:51:40 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:51:40 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:51:40 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:51:40 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:54:33 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:54:33 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:54:33 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:54:33 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:54:33 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:56:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:56:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:56:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:56:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:56:21 - ERROR - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.RegionCode index: name_1 dup key: { : null })
02/06/2020 03:58:19 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:19 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:19 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:20 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:20 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:20 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:20 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:20 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:20 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_valid_reference_field - (<RegionCode: RegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.is_field_unique - (<RegionCode: RegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - ERROR - BaseRecord.custom_validate - (<RegionCode: RegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 03:58:48 - DEBUG - BaseRecord.save - (<RegionCode: RegionCode object>,) - {} - RegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_valid_reference_field - (<MicroRegionCode: MicroRegionCode object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.is_field_unique - (<MicroRegionCode: MicroRegionCode object>, 'regionCode') - {} - True - executed without exceptions
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - ERROR - BaseRecord.custom_validate - (<MicroRegionCode: MicroRegionCode object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['regionCode'])
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:00:02 - DEBUG - BaseRecord.save - (<MicroRegionCode: MicroRegionCode object>,) - {} - MicroRegionCode object - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 04:59:54 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 04:59:54 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 04:59:54 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 04:59:54 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 04:59:54 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 04:59:54 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - True - executed without exceptions
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:01:56 - DEBUG - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - WorkOrderStatus object - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:07 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:08 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_createdUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_valid_reference_field - (<WorkOrderStatus: WorkOrderStatus object>, '_lastModifiedUser') - {} - True - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - DEBUG - BaseRecord.is_field_unique - (<WorkOrderStatus: WorkOrderStatus object>, 'status') - {} - False - executed without exceptions
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.custom_validate - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception There was errors with the following field(s)(['DuplicateKeyError']: ['status'])
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
02/06/2020 05:02:11 - ERROR - BaseRecord.save - (<WorkOrderStatus: WorkOrderStatus object>,) - {} - None - executed with an exception Tried to save duplicate unique keys (E11000 duplicate key error collection: Tracker.WorkOrderStatus index: status_1 dup key: { : "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" })
